import asyncio
import re
import urllib.parse
from logging import getLogger
from typing import Any, Dict, List, Literal, Optional

import aiohttp
import upnpclient

from core.config.settings import settings

SESSION_ID_REGEX = re.compile(r"<sessionId>(.*?)</sessionId>")
POWER_STATUS_REGEX = re.compile(r"<value><u8>(.*?)</u8></value>")

logger = getLogger(__name__)

PlayModeType = Literal["NORMAL", "SHUFFLE", "REPEAT_ALL"]
SeekUnitType = Literal["REL_TIME", "ABS_TIME", "ABS_COUNT", "TRACK_NR"]


class RuarkR5Controller:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º Ruark R5"""

    _session_id: str

    def __init__(self, device_name: str = "Ruark R5") -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø–æ–∏—Å–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ Ruark R5 –≤ —Å–µ—Ç–∏"""
        self.device: Optional[upnpclient.Device] = self.find_device(
            device_name
        )
        if not self.device:
            logger.warning(f"‚ö† –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ '{device_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–µ—Ç–∏!")
            return

        self.ip = self.get_device_ip()
        logger.info(f"IP-–∞–¥—Ä–µ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {self.ip}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        self.services: Dict[str, Any] = {
            service.service_type: service for service in self.device.services
        }

        self.av_transport: Any = self.services.get(
            "urn:schemas-upnp-org:service:AVTransport:1"
        )
        self.connection_manager: Any = self.services.get(
            "urn:schemas-upnp-org:service:ConnectionManager:1"
        )
        self.rendering_control: Any = self.services.get(
            "urn:schemas-upnp-org:service:RenderingControl:1"
        )

        logger.info(
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ {self.device.friendly_name} "
            f"({self.device.location})"
        )
        self.print_available_services()

    def find_device(self, device_name: str) -> Optional[upnpclient.Device]:
        """–ù–∞—Ö–æ–¥–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ –∏–º–µ–Ω–∏"""
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {device_name}")
        try:
            devices = upnpclient.discover()
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(devices)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
            logger.info(f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {devices}")
            for device in devices:
                try:
                    logger.info(
                        f"–ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device.friendly_name}"
                    )
                    if device_name in device.friendly_name:
                        logger.info(
                            "–ù–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: "
                            f"{device.friendly_name}"
                        )
                        return device
                except Exception as e:
                    logger.error(
                        "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ "
                        f"{device}: {str(e)}"
                    )
                    continue
            logger.info(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å –∏–º–µ–Ω–µ–º: {device_name}")
            return None
        except Exception as e:
            logger.error(f"Error during device discovery: {str(e)}")
            return None

    def get_device_ip(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç IP-–∞–¥—Ä–µ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        if self.device:
            parsed_url = urllib.parse.urlparse(self.device.location)
            return parsed_url.hostname
        return None

    def print_available_services(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        logger.info("\nüì° –î–æ—Å—Ç—É–ø–Ω—ã–µ UPnP —Å–µ—Ä–≤–∏—Å—ã:")
        for service in self.services:
            logger.info(f" - {service}")

    #  ConnectionManager
    async def get_protocol_info(self, connection_manager) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
        return await asyncio.to_thread(self.connection_manager.GetProtocolInfo)

    async def get_current_connection_ids(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        return (await asyncio.to_thread(
            self.connection_manager.GetCurrentConnectionIDs
        ))["ConnectionIDs"]

    async def get_current_connection_info(
        self, connection_id: int
    ) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏"""
        return await asyncio.to_thread(
            self.connection_manager.GetCurrentConnectionInfo,
            ConnectionID=connection_id
        )

    #   AVTransport
    async def set_av_transport_uri(
        self, uri: str, metadata: str = ""
    ) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞"""
        await asyncio.to_thread(
            self.av_transport.SetAVTransportURI,
            InstanceID=0,
            CurrentURI=uri,
            CurrentURIMetaData=metadata
        )
        logger.info(f"üéµ –ü–æ—Ç–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {uri}")

    async def play(self) -> None:
        """–ó–∞–ø—É—Å–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        await asyncio.to_thread(
            self.av_transport.Play, InstanceID=0, Speed="1"
        )
        logger.info("‚ñ∂ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")

    async def pause(self) -> None:
        """–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        await asyncio.to_thread(self.av_transport.Pause, InstanceID=0)
        logger.info("‚è∏ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

    async def stop(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        playing = await self.is_playing()
        if playing:
            await asyncio.to_thread(self.av_transport.Stop, InstanceID=0)
            logger.info("‚èπ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

    async def next_track(self) -> None:
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫"""
        await asyncio.to_thread(self.av_transport.Next, InstanceID=0)
        logger.info("‚è≠ –°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫")

    async def previous_track(self) -> None:
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫"""
        await asyncio.to_thread(self.av_transport.Previous, InstanceID=0)
        logger.info("‚èÆ –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫")

    async def seek(self, target: str, unit: SeekUnitType = "REL_TIME") -> None:
        """–ü–µ—Ä–µ–º–æ—Ç–∫–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '00:01:30')"""
        await asyncio.to_thread(
            self.av_transport.Seek,
            InstanceID=0,
            Unit=unit,
            Target=target
        )
        logger.info(f"‚è© –ü–µ—Ä–µ–º–æ—Ç–∫–∞ –Ω–∞ {target}")

    async def get_media_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª–µ"""
        return await asyncio.to_thread(
            self.av_transport.GetMediaInfo, InstanceID=0
        )

    async def get_position_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        return await asyncio.to_thread(
            self.av_transport.GetPositionInfo, InstanceID=0
        )

    async def get_transport_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"""
        return await asyncio.to_thread(
            self.av_transport.GetTransportInfo,
            InstanceID=0
        )

    async def get_transport_settings(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        return await asyncio.to_thread(
            self.av_transport.GetTransportSettings,
            InstanceID=0
        )

    async def get_current_rel_time(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
        position_info = await self.get_position_info()
        rel_time = position_info.get("RelTime")
        return rel_time

    async def is_playing(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ª–∏ —á—Ç–æ-–ª–∏–±–æ"""
        ruark_state = await self.get_transport_info()
        play_state = ruark_state.get("CurrentTransportState")
        if play_state == "PLAYING":
            return True
        return False

    async def set_play_mode(self, mode: PlayModeType) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        await asyncio.to_thread(
            self.av_transport.SetPlayMode,
            InstanceID=0,
            NewPlayMode=mode
        )
        logger.info(f"üîÑ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–∂–∏–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {mode}")

    #   RenderingControl
    async def get_volume(self) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏"""
        result = await asyncio.to_thread(
            self.rendering_control.GetVolume,
            InstanceID=0,
            Channel="Master"
        )
        return result["CurrentVolume"]

    async def set_volume(self, volume: int) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ (0-100)"""
        await asyncio.to_thread(
            self.rendering_control.SetVolume,
            InstanceID=0,
            Channel="Master",
            DesiredVolume=volume
        )
        logger.info(f"üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {volume}")

    async def get_mute(self) -> bool:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è mute"""
        result = await asyncio.to_thread(
            self.rendering_control.GetMute,
            InstanceID=0,
            Channel="Master"
        )
        return bool(result["CurrentMute"])

    async def set_mute(self, mute: bool) -> None:
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ/–≤–∫–ª—é—á–µ–Ω–∏–µ –∑–≤—É–∫–∞"""
        await asyncio.to_thread(
            self.rendering_control.SetMute,
            InstanceID=0,
            Channel="Master",
            DesiredMute=int(mute)
        )
        logger.info("üîá –ó–≤—É–∫ –æ—Ç–∫–ª—é—á–µ–Ω" if mute else "üîä –ó–≤—É–∫ –≤–∫–ª—é—á–µ–Ω")

    async def fade_out_ruark(
            self,
            start_volume: int,
            min_volume: int = 2,
            step: int = 6,
            delay: float = 0.1
    ):
        """–ü–ª–∞–≤–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ Ruark –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤"""
        volume = start_volume - start_volume % 2

        logger.info(
            f"üîâ –ü–ª–∞–≤–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ Ruark: "
            f"{volume} ‚ûù {min_volume} —à–∞–≥–æ–º {step}")

        try:
            for v in range(volume, min_volume - 1, -step):
                logger.info(f"  ‚û§ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å: {v}")
                await self.set_volume(v)
                await asyncio.sleep(delay)

            logger.info("‚úÖ –ü–ª–∞–≤–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ Ruark –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω–∏–∂–µ–Ω–∏–∏ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ Ruark: {e}")

    async def list_presets(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ—Å–µ—Ç–æ–≤"""
        result = await asyncio.to_thread(
            self.rendering_control.ListPresets,
            InstanceID=0
        )
        return result["CurrentPresetNameList"]

    async def select_preset(self, preset_name: str) -> None:
        """–í—ã–±–æ—Ä –ø—Ä–µ—Å–µ—Ç–∞"""
        await asyncio.to_thread(
            self.rendering_control.SelectPreset,
            InstanceID=0,
            PresetName=preset_name
        )
        logger.info(f"üéõ –í—ã–±—Ä–∞–Ω –ø—Ä–µ—Å–µ—Ç: {preset_name}")

    async def get_session_id(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ session_id"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"http://{self.ip}/fsapi/CREATE_SESSION/"
                    f"?pin={settings.ruark_pin}"
                ) as response:
                    content = await response.text()
                    self._session_id = (
                        SESSION_ID_REGEX.search(content).group(1)
                    )
                    return self._session_id
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ session_id: {e}")
            return ""

    async def get_power_status(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–∏—Ç–∞–Ω–∏—è"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"http://{self.ip}/fsapi/GET/"
                    f"netRemote.sys.power?pin={settings.ruark_pin}"
                    f"&sid={self._session_id}"
                ) as response:
                    content = await response.text()
                    status = POWER_STATUS_REGEX.search(content).group(1)
                    logger.info(f"üîå –°—Ç–∞—Ç—É—Å –ø–∏—Ç–∞–Ω–∏—è: {status}")
                    return status
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–∏—Ç–∞–Ω–∏—è: {e}")
            return ""

    async def turn_power_on(self) -> str:
        """–í–∫–ª—é—á–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"http://{self.ip}/fsapi/SET/"
                    f"netRemote.sys.power?pin={settings.ruark_pin}"
                    f"&sid={self._session_id}&value=1"
                ) as response:
                    if response.status == 200:
                        status = await self.get_power_status()
                        if status == "1":
                            logger.info("üîå –ü–∏—Ç–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ")
                            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –ø–∏—Ç–∞–Ω–∏—è: {e}")
            return False

    async def turn_power_off(self) -> str:
        """–í—ã–∫–ª—é—á–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"http://{self.ip}/fsapi/SET/"
                    f"netRemote.sys.power?pin={settings.ruark_pin}"
                    f"&sid={self._session_id}&value=0"
                ) as response:
                    if response.status == 200:
                        status = await self.get_power_status()
                        if status == "0":
                            logger.info("üîå –ü–∏—Ç–∞–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ")
                            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –ø–∏—Ç–∞–Ω–∏—è: {e}")
            return False

    async def print_status(self) -> None:
        """–í—ã–≤–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        logger.info("üé∂ –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Ruark R5:")
        volume = await self.get_volume()
        mute = await self.get_mute()
        media_info = await self.get_media_info()
        position_info = await self.get_position_info()
        transport_info = await self.get_transport_info()

        logger.info(f"üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å: {volume}")
        logger.info(f"üîá Mute: {mute}")
        logger.info(f"üìÄ –ú–µ–¥–∏–∞: {media_info}")
        logger.info(f"‚è± –ü–æ–∑–∏—Ü–∏—è: {position_info}")
        logger.info(f"üöÄ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {transport_info}")
