import asyncio
from logging import getLogger

from fastapi import APIRouter, Response

from core.dependencies.main_di_container import MainDIContainer
from dlna_stream_server.handlers.stream_handler import StreamHandler

logger = getLogger(__name__)

router = APIRouter()

di_container = MainDIContainer().get_container()

stream_handler = di_container.get(StreamHandler)


@router.post("/set_stream")
async def set_stream(yandex_url: str):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç URL —Ç—Ä–µ–∫–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Ç–æ–∫–æ–≤—É—é –ø–µ—Ä–µ–¥–∞—á—É –Ω–∞ Ruark."""
    logger.info(f"üì• –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ —Å {yandex_url}")
    asyncio.create_task(stream_handler.play_stream(yandex_url))
    return {"message": "–°—Ç—Ä–∏–º –∑–∞–ø—É—â–µ–Ω", "stream_url": yandex_url}


@router.get("/live_stream.mp3")
async def serve_stream():
    """–†–∞–∑–¥–∞–µ—Ç –ø–æ—Ç–æ–∫–æ–≤—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª —á–µ—Ä–µ–∑ HTTP."""
    return await stream_handler.stream_audio()


@router.head("/live_stream.mp3")
async def serve_head():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç HEAD-–∑–∞–ø—Ä–æ—Å –¥–ª—è Ruark R5 —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏."""
    headers = {
        "Content-Type": "audio/mpeg",
        "Accept-Ranges": "bytes",
        "Connection": "keep-alive",
    }
    return Response(headers=headers)


@router.post("/stop_stream")
async def stop_stream():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ—Ç–æ–∫–æ–≤—É—é –ø–µ—Ä–µ–¥–∞—á—É –Ω–∞ Ruark."""
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–æ–≤–æ–π –ø–µ—Ä–µ–¥–∞—á–∏...")
    await stream_handler.stop_stream()
    return {"message": "–ü–æ—Ç–æ–∫–æ–≤–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"}
