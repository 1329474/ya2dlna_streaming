import asyncio
import tempfile
import os
import shutil
from logging import getLogger

from fastapi.responses import FileResponse

from core.config.settings import settings
from ruark_audio_system.ruark_r5_controller import RuarkR5Controller

logger = getLogger(__name__)


class StreamHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤–æ–π –ø–µ—Ä–µ–¥–∞—á–µ–π —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã–π mp3-—Ñ–∞–π–ª."""

    def __init__(self, ruark_controls: RuarkR5Controller):
        self._ruark_controls = ruark_controls
        self._ruark_lock = asyncio.Lock()
        self._temp_dir = tempfile.mkdtemp(prefix="ruark_stream_")
        self._current_file_path: str | None = None

    async def execute_with_lock(self, func, *args, **kwargs):
        async with self._ruark_lock:
            for attempt in range(3):
                try:
                    logger.debug(f"–í—ã–ø–æ–ª–Ω—è–µ–º {func.__name__} —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ {args}, {kwargs}")
                    await func(*args, **kwargs)
                    logger.debug(f"‚úÖ {func.__name__} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                    return
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ {func.__name__}, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}: {e}")
                    await asyncio.sleep(1)

    async def stop_stream(self):
        logger.info("‚èπ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫ –∏ —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª...")
        await self.execute_with_lock(self._ruark_controls.stop)
        if self._current_file_path and os.path.exists(self._current_file_path):
            try:
                os.remove(self._current_file_path)
                logger.info(f"üóë –£–¥–∞–ª—ë–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {self._current_file_path}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª: {e}")
        self._current_file_path = None

    async def start_ffmpeg_to_file(self, yandex_url: str):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä—É–µ—Ç —Ç—Ä–µ–∫ –≤ mp3-—Ñ–∞–π–ª."""
        await self.stop_stream()

        temp_file_path = os.path.join(self._temp_dir, "track.mp3")
        logger.info(f"üéß –ö–∞—á–∞–µ–º –∏ –∫–æ–¥–∏—Ä—É–µ–º —Ç—Ä–µ–∫ –≤ {temp_file_path}")

        process = await asyncio.create_subprocess_exec(
            "ffmpeg", "-y", "-i", yandex_url,
            "-acodec", "libmp3lame", "-b:a", "320k",
            temp_file_path,
            stdout=asyncio.subprocess.DEVNULL,
            stderr=asyncio.subprocess.PIPE
        )
        _, stderr = await process.communicate()

        if process.returncode != 0:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ ffmpeg: {stderr.decode()}")
            raise Exception("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∫–∏ ffmpeg")

        logger.info(f"‚úÖ –¢—Ä–µ–∫ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω: {temp_file_path}")
        self._current_file_path = temp_file_path

    async def stream_audio(self):
        """–û—Ç–¥–∞—ë—Ç –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –æ—Ç–≤–µ—Ç–µ FastAPI."""
        if not self._current_file_path:
            raise Exception("–ü–æ—Ç–æ–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω")

        logger.info(f"üì° –û—Ç–¥–∞—ë–º —Ñ–∞–π–ª: {self._current_file_path}")
        return FileResponse(self._current_file_path, media_type="audio/mpeg")

    async def play_stream(self, yandex_url: str):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ mp3-—Ñ–∞–π–ª–∞ –Ω–∞ Ruark."""
        await self.stop_stream()
        await self.start_ffmpeg_to_file(yandex_url)

        track_url = (
            f"http://{settings.local_server_host}:{settings.local_server_port_dlna}/live_stream.mp3"
        )
        logger.info(f"üì° –ü–æ—Ç–æ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ URL: {track_url}")

        await self.execute_with_lock(self._ruark_controls.set_av_transport_uri, track_url)
        await self.execute_with_lock(self._ruark_controls.play)

    def cleanup(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        if os.path.exists(self._temp_dir):
            shutil.rmtree(self._temp_dir)
            logger.info(f"üßπ –£–¥–∞–ª–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self._temp_dir}")
